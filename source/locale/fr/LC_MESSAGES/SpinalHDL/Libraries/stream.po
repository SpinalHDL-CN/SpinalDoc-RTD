# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018 - 2024, SpinalHDL
# This file is distributed under the same license as the SpinalHDL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: SpinalHDL\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-14 13:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../SpinalHDL/Libraries/stream.rst:7
msgid "Stream"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:10
msgid "Specification"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:12
msgid "The Stream interface is a simple handshake protocol to carry payload."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:13
msgid "It could be used for example to push and pop elements into a FIFO, send requests to a UART controller, etc."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:19
msgid "Signal"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:20
#: ../../SpinalHDL/Libraries/stream.rst:227
#: ../../SpinalHDL/Libraries/stream.rst:242
#: ../../SpinalHDL/Libraries/stream.rst:283
#: ../../SpinalHDL/Libraries/stream.rst:304
#: ../../SpinalHDL/Libraries/stream.rst:345
#: ../../SpinalHDL/Libraries/stream.rst:363
msgid "Type"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:21
msgid "Driver"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:22
#: ../../SpinalHDL/Libraries/stream.rst:96
#: ../../SpinalHDL/Libraries/stream.rst:228
#: ../../SpinalHDL/Libraries/stream.rst:243
#: ../../SpinalHDL/Libraries/stream.rst:284
#: ../../SpinalHDL/Libraries/stream.rst:305
#: ../../SpinalHDL/Libraries/stream.rst:346
#: ../../SpinalHDL/Libraries/stream.rst:364
#: ../../SpinalHDL/Libraries/stream.rst:433
#: ../../SpinalHDL/Libraries/stream.rst:448
msgid "Description"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:23
msgid "Don't care when"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:24
msgid "valid"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:25
#: ../../SpinalHDL/Libraries/stream.rst:30
#: ../../SpinalHDL/Libraries/stream.rst:110
#: ../../SpinalHDL/Libraries/stream.rst:114
#: ../../SpinalHDL/Libraries/stream.rst:251
msgid "Bool"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:26
#: ../../SpinalHDL/Libraries/stream.rst:36
msgid "Master"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:27
msgid "When high => payload present on the interface"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:29
msgid "ready"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:31
msgid "Slave"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:32
msgid "When low => transaction are not consumed by the slave"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:33
#: ../../SpinalHDL/Libraries/stream.rst:38
msgid "valid is low"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:34
msgid "payload"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:35
#: ../../SpinalHDL/Libraries/stream.rst:230
#: ../../SpinalHDL/Libraries/stream.rst:286
#: ../../SpinalHDL/Libraries/stream.rst:348
msgid "T"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:37
msgid "Content of the transaction"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:49
msgid "There is some examples of usage in SpinalHDL :"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:70
msgid "Each slave can or can't allow the payload to change when valid is high and ready is low. For examples:"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:73
msgid "An priority arbiter without lock logic can switch from one input to the other (which will change the payload)."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:74
msgid "An UART controller could directly use the write port to drive UART pins and only consume the transaction at the end of the transmission. Be careful with that."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:78
msgid "Semantics"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:80
msgid "When manually reading/driving the signals of a Stream keep in mind that:"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:82
msgid "After being asserted, ``valid`` may only be deasserted once the current payload was acknowleged. This means ``valid`` can only toggle to 0 the cycle after a the slave did a read by asserting ``ready``."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:83
msgid "In contrast to that ``ready`` may change at any time."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:84
msgid "A transfer is only done on cycles where both ``valid`` and ``ready`` are asserted."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:85
msgid "``valid`` of a Stream must not depend on ``ready`` in a combinatorial way and any path between the two must be registered."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:86
msgid "It is recommended that ``valid`` does not depend on ``ready`` at all."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:89
msgid "Functions"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:95
msgid "Syntax"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:97
#: ../../SpinalHDL/Libraries/stream.rst:463
msgid "Return"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:98
msgid "Latency"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:99
msgid "Stream(type : Data)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
#: ../../SpinalHDL/Libraries/stream.rst:100
msgid "Create a Stream of a given type"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:101
#: ../../SpinalHDL/Libraries/stream.rst:106
#: ../../SpinalHDL/Libraries/stream.rst:118
#: ../../SpinalHDL/Libraries/stream.rst:125
#: ../../SpinalHDL/Libraries/stream.rst:131
#: ../../SpinalHDL/Libraries/stream.rst:137
#: ../../SpinalHDL/Libraries/stream.rst:163
#: ../../SpinalHDL/Libraries/stream.rst:168
#: ../../SpinalHDL/Libraries/stream.rst:245
#: ../../SpinalHDL/Libraries/stream.rst:248
#: ../../SpinalHDL/Libraries/stream.rst:307
#: ../../SpinalHDL/Libraries/stream.rst:310
#: ../../SpinalHDL/Libraries/stream.rst:366
#: ../../SpinalHDL/Libraries/stream.rst:369
#: ../../SpinalHDL/Libraries/stream.rst:465
#: ../../SpinalHDL/Libraries/stream.rst:467
msgid "Stream[T]"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:103
msgid "master/slave Stream(type : Data)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Initialized with corresponding in/out setup"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:108
msgid "x.fire"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:109
msgid "Return True when a transaction is consumed on the bus (valid && ready)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:112
msgid "x.isStall"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:113
msgid "Return True when a transaction is stall on the bus (valid && ! ready)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:116
msgid "x.queue(size:Int)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:117
msgid "Return a Stream connected to x through a FIFO"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:119
msgid "2"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x.m2sPipe()"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x.stage()"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Return a Stream drived by x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "through a register stage that cut valid/payload paths"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Cost = (payload width + 1) flop flop"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:126
#: ../../SpinalHDL/Libraries/stream.rst:138
#: ../../SpinalHDL/Libraries/stream.rst:148
#: ../../SpinalHDL/Libraries/stream.rst:159
msgid "1"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:127
msgid "x.s2mPipe()"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "ready paths is cut by a register stage"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Cost = payload width * (mux2 + 1 flip flop)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:132
#: ../../SpinalHDL/Libraries/stream.rst:143
#: ../../SpinalHDL/Libraries/stream.rst:153
#: ../../SpinalHDL/Libraries/stream.rst:164
#: ../../SpinalHDL/Libraries/stream.rst:169
#: ../../SpinalHDL/Libraries/stream.rst:174
#: ../../SpinalHDL/Libraries/stream.rst:179
msgid "0"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:133
msgid "x.halfPipe()"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "valid/ready/payload paths are cut by some register"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Cost = (payload width + 2) flip flop, bandwidth divided by two"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x << y"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "y >> x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:141
msgid "Connect y to x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x <-< y"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "y >-> x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:146
msgid "Connect y to x through a m2sPipe"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x </< y"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "y >/> x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:151
msgid "Connect y to x through a s2mPipe"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "x <-/< y"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "y >/-> x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Connect y to x through s2mPipe().m2sPipe()"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Which imply no combinatorial path between x and y"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:160
msgid "x.haltWhen(cond : Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Return a Stream connected to x"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Halted when cond is true"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:165
msgid "x.throwWhen(cond : Bool)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "When cond is true, transaction are dropped"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:170
msgid "x.translateWith(that : T2)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Return a Stream with payload `that`"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Modify the payload of the `x` stream, while preserving the `valid` and `ready` signals"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:173
#: ../../SpinalHDL/Libraries/stream.rst:178
msgid "Stream[T2]"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:175
msgid "x.map(translate: (T) => T2)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Return a Stream with payload calculated by translate function"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:182
msgid "The following code will create this logic :"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:202
msgid "Utils"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:204
msgid "There is many utils that you can use in your design in conjunction with the Stream bus, this chapter will document them."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:207
msgid "StreamFifo"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:209
msgid "On each stream you can call the .queue(size) to get a buffered stream. But you can also instantiate the FIFO component itself :"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:226
#: ../../SpinalHDL/Libraries/stream.rst:282
#: ../../SpinalHDL/Libraries/stream.rst:344
msgid "parameter name"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:229
#: ../../SpinalHDL/Libraries/stream.rst:285
#: ../../SpinalHDL/Libraries/stream.rst:347
msgid "dataType"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:231
#: ../../SpinalHDL/Libraries/stream.rst:287
#: ../../SpinalHDL/Libraries/stream.rst:349
msgid "Payload data type"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:232
#: ../../SpinalHDL/Libraries/stream.rst:288
msgid "depth"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:233
#: ../../SpinalHDL/Libraries/stream.rst:289
msgid "Int"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:234
#: ../../SpinalHDL/Libraries/stream.rst:290
msgid "Size of the memory used to store elements"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:241
#: ../../SpinalHDL/Libraries/stream.rst:303
#: ../../SpinalHDL/Libraries/stream.rst:362
msgid "io name"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:244
#: ../../SpinalHDL/Libraries/stream.rst:306
msgid "push"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:246
#: ../../SpinalHDL/Libraries/stream.rst:308
#: ../../SpinalHDL/Libraries/stream.rst:367
msgid "Used to push elements"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:247
#: ../../SpinalHDL/Libraries/stream.rst:309
msgid "pop"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:249
#: ../../SpinalHDL/Libraries/stream.rst:311
#: ../../SpinalHDL/Libraries/stream.rst:370
msgid "Used to pop elements"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:250
msgid "flush"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:252
msgid "Used to remove all elements inside the FIFO"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:253
msgid "occupancy"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:254
#: ../../SpinalHDL/Libraries/stream.rst:313
#: ../../SpinalHDL/Libraries/stream.rst:316
msgid "UInt of log2Up(depth + 1) bits"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:255
msgid "Indicate the internal memory occupancy"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:259
msgid "StreamFifoCC"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:261
msgid "You can instantiate the dual clock domain version of the fifo the following way :"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:291
msgid "pushClock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:292
#: ../../SpinalHDL/Libraries/stream.rst:295
#: ../../SpinalHDL/Libraries/stream.rst:351
#: ../../SpinalHDL/Libraries/stream.rst:354
msgid "ClockDomain"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:293
#: ../../SpinalHDL/Libraries/stream.rst:352
msgid "Clock domain used by the push side"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:294
msgid "popClock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:296
#: ../../SpinalHDL/Libraries/stream.rst:355
msgid "Clock domain used by the pop side"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:312
msgid "pushOccupancy"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:314
msgid "Indicate the internal memory occupancy (from the push side perspective)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:315
msgid "popOccupancy"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:317
msgid "Indicate the internal memory occupancy  (from the pop side perspective)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:321
msgid "StreamCCByToggle"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:323
msgid "Component that connects Streams across clock domains based on toggling signals."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:324
msgid "This way of implementing a cross clock domain bridge is characterized by a small area usage but also a low bandwidth."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:350
msgid "inputClock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:353
msgid "outputClock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:365
msgid "input"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:368
msgid "output"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:373
msgid "Alternatively you can also use a this shorter syntax which directly return you the cross clocked stream:"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:387
msgid "StreamWidthAdapter"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:389
msgid "This component adapts the width of the input stream to the output stream. When the width of the ``outStream`` payload is greater than the ``inStream``, by combining the payloads of several input transactions into one; conversely, if the payload width of the ``outStream`` is less than the ``inStream``, one input transaction will be split into several output transactions."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:392
msgid "In the best case, the width of the payload of the ``inStream`` should be an integer multiple of the ``outStream`` as shown below."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:400
msgid "As in the example above, the two ``inStream`` transactions will be merged into one ``outStream`` transaction, and the payload of the first input transaction will be placed on the lower bits of the output payload by default."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:402
msgid "If the expected order of input transaction payload placement is different from the default setting, here is an example."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:410
msgid "There is also a traditional parameter called ``endianness``, which has the same effect as ``ORDER``. The value of ``endianness`` is the same as ``LOWER_FIRST`` of ``order`` when it is ``LITTLE``, and the same as ``HIGHER_FIRST`` when it is ``BIG``. The ``padding`` parameter is an optional boolean value to determine whether the adapter accepts non-integer multiples of the input and output payload width."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:416
msgid "StreamArbiter"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:418
msgid "When you have multiple Streams and you want to arbitrate them to drive a single one, you can use the StreamArbiterFactory."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:432
msgid "Arbitration functions"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:434
msgid "lowerFirst"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:435
msgid "Lower port have priority over higher port"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:436
msgid "roundRobin"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:437
msgid "Fair round robin arbitration"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:438
msgid "sequentialOrder"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Could be used to retrieve transaction in a sequancial order"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "First transaction should come from port zero, then from port one, ..."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:447
msgid "Lock functions"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:449
msgid "noLock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:450
msgid "The port selection could change every cycle, even if the transaction on the selected port is not consumed."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:451
msgid "transactionLock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:452
msgid "The port selection is locked until the transaction on the selected port is consumed."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:453
msgid "fragmentLock"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "Could be used to arbitrate Stream[Flow[T]]."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:0
msgid "In this mode, the port selection is locked until the selected port finish is burst (last=True)."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:462
msgid "Generation functions"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:464
msgid "on(inputs : Seq[Stream[T]])"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:466
msgid "onArgs(inputs : Stream[T]*)"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:470
msgid "StreamJoin"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:472
msgid "This utility takes multiple input streams and waits until all of them fire `valid` before letting all of them through by providing `ready`."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:481
msgid "StreamFork"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:483
msgid "A StreamFork will clone each incoming data to all its output streams. If synchronous is true, all output streams will always fire together, which means that the stream will halt until all output streams are ready. If synchronous is false, output streams may be ready one at a time, at the cost of an additional flip flop (1 bit per output). The input stream will block until all output streams have processed each item regardlessly."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:495
msgid "or"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:503
msgid "StreamMux"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:505
msgid "A mux implementation for ``Stream``. It takes a ``select`` signal and streams in ``inputs``, and returns a ``Stream`` which is connected to one of the input streams specified by ``select``. ``StreamArbiter`` is a facility works similar to this but is more powerful."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:517
msgid "The ``UInt`` type of ``select`` signal could not be changed while output stream is stalled, or it might break the transaction on the fly. Use ``Stream`` typed ``select`` can generate a stream interface which only fire and change the routing when it is safe."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:522
msgid "StreamDemux"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:524
msgid "A demux implementation for ``Stream``. It takes a ``input``, a ``select`` and a ``portCount`` and returns a ``Vec(Stream)`` where the output stream specified by ``select`` is connected to ``input``, the other output streams are inactive. For safe transaction, refer the notes above."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:535
msgid "StreamDispatcherSequencial"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:537
msgid "This util take its input stream and routes it to ``outputCount`` stream in a sequential order."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:548
msgid "StreamTransactionExtender"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:550
msgid "This utility will take one input transfer and generate several output transfers, it provides the facility to repeat the payload value ``count+1`` times into output transfers. The ``count`` is captured and registered each time inputStream fires for an individual payload."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:565
msgid "This ``extender`` provides several status signals, such as ``working``, ``last``, ``done`` where ``working`` means there is one input transfer accepted and in-progress, ``last`` indicates the last output transfer is prepared and waiting to complete, ``done`` become valid represents the last output transfer is fireing and making the current input transaction process complete and ready to start another transaction."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:582
msgid "If only count for output stream is required then use ``StreamTransactionCounter`` instead."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:585
msgid "Simulation support"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:587
msgid "For simulation master and slave implementations are available:"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:593
msgid "Class"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:594
msgid "Usage"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:595
msgid "StreamMonitor"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:596
msgid "Used for both master and slave sides, calls function with payload if Stream fires."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:597
msgid "StreamDriver"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:598
msgid "Testbench master side, drives values by calling function to apply value (if available). Function must return if value was available. Supports random delays."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:599
msgid "StreamReadyRandmizer"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:600
msgid "Randomizes ``ready`` for reception of data, testbench is the slave side."
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:601
msgid "ScoreboardInOrder"
msgstr ""

#: ../../SpinalHDL/Libraries/stream.rst:602
msgid "Often used to compare reference/dut data"
msgstr ""
